volumes:
  kong_db_data: {}

networks:
  kong-net:
    driver: bridge
  app-net:
    driver: bridge

services:
  kong-database:
    image: postgres:latest
    restart: on-failure
    volumes:
      - kong_db_data:/var/lib/postgresql/data
    networks:
      - kong-net
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 5s
      timeout: 10s
      retries: 10
    ports:
      - "5432:5432"

  frontend:
    build:
      context: ./frontend
      args:
        NEXT_PUBLIC_API_URL: http://localhost:8000
    restart: on-failure
    networks:
      - app-net
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - KONG_INTERNAL_URL=http://kong:8000
    depends_on:
      - kong
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3000",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  backend-1:
    build: ./backend
    restart: on-failure
    networks:
      - app-net
    environment:
      - PORT=4000
      - INSTANCE_ID=backend-1
      - NODE_ENV=production
    ports:
      - "4000:4000"
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:4000/health",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  backend-2:
    build: ./backend
    restart: on-failure
    networks:
      - app-net
    environment:
      - PORT=4000
      - INSTANCE_ID=backend-2
      - NODE_ENV=production
    ports:
      - "4001:4000"
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:4000/health",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  backend-3:
    build: ./backend
    restart: on-failure
    networks:
      - app-net
    environment:
      - PORT=4000
      - INSTANCE_ID=backend-3
      - NODE_ENV=production
    ports:
      - "4002:4000"
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:4000/health",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  kong-migrations:
    image: kong:latest
    command: kong migrations bootstrap
    depends_on:
      kong-database:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
    networks:
      - kong-net

  kong:
    image: kong:latest
    restart: on-failure
    depends_on:
      kong-migrations:
        condition: service_completed_successfully
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
    networks:
      - kong-net
      - app-net
    ports:
      - "8000:8000"
      - "8443:8443"
      # Admin API ports removed from public access
      # - "8001:8001"
      # - "8444:8444"
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10

  kong-config:
    image: curlimages/curl:latest
    depends_on:
      kong:
        condition: service_healthy
    volumes:
      - ./kong-config.sh:/kong-config.sh
    entrypoint: ["/bin/sh", "/kong-config.sh"]
    networks:
      - kong-net
